// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCustomerDB is a mock of CustomerDB interface
type MockCustomerDB struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerDBMockRecorder
}

// MockCustomerDBMockRecorder is the mock recorder for MockCustomerDB
type MockCustomerDBMockRecorder struct {
	mock *MockCustomerDB
}

// NewMockCustomerDB creates a new mock instance
func NewMockCustomerDB(ctrl *gomock.Controller) *MockCustomerDB {
	mock := &MockCustomerDB{ctrl: ctrl}
	mock.recorder = &MockCustomerDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomerDB) EXPECT() *MockCustomerDBMockRecorder {
	return m.recorder
}

// NewCustomer mocks base method
func (m *MockCustomerDB) NewCustomer(arg0 int64, arg1, arg2, arg3, arg4 string) *customer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCustomer", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*customer)
	return ret0
}

// NewCustomer indicates an expected call of NewCustomer
func (mr *MockCustomerDBMockRecorder) NewCustomer(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCustomer", reflect.TypeOf((*MockCustomerDB)(nil).NewCustomer), arg0, arg1, arg2, arg3, arg4)
}

// SelectCustomersForUpload mocks base method
func (m *MockCustomerDB) SelectCustomersForUpload() (*customers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCustomersForUpload")
	ret0, _ := ret[0].(*customers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectCustomersForUpload indicates an expected call of SelectCustomersForUpload
func (mr *MockCustomerDBMockRecorder) SelectCustomersForUpload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCustomersForUpload", reflect.TypeOf((*MockCustomerDB)(nil).SelectCustomersForUpload))
}

// MockCustomer is a mock of Customer interface
type MockCustomer struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerMockRecorder
}

// MockCustomerMockRecorder is the mock recorder for MockCustomer
type MockCustomerMockRecorder struct {
	mock *MockCustomer
}

// NewMockCustomer creates a new mock instance
func NewMockCustomer(ctrl *gomock.Controller) *MockCustomer {
	mock := &MockCustomer{ctrl: ctrl}
	mock.recorder = &MockCustomerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomer) EXPECT() *MockCustomerMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockCustomer) Insert() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert")
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockCustomerMockRecorder) Insert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCustomer)(nil).Insert))
}

// Uploaded mocks base method
func (m *MockCustomer) Uploaded() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uploaded")
	ret0, _ := ret[0].(error)
	return ret0
}

// Uploaded indicates an expected call of Uploaded
func (mr *MockCustomerMockRecorder) Uploaded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uploaded", reflect.TypeOf((*MockCustomer)(nil).Uploaded))
}

// MockCustomers is a mock of Customers interface
type MockCustomers struct {
	ctrl     *gomock.Controller
	recorder *MockCustomersMockRecorder
}

// MockCustomersMockRecorder is the mock recorder for MockCustomers
type MockCustomersMockRecorder struct {
	mock *MockCustomers
}

// NewMockCustomers creates a new mock instance
func NewMockCustomers(ctrl *gomock.Controller) *MockCustomers {
	mock := &MockCustomers{ctrl: ctrl}
	mock.recorder = &MockCustomersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomers) EXPECT() *MockCustomersMockRecorder {
	return m.recorder
}

// Append mocks base method
func (m *MockCustomers) Append(arg0 *customer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Append", arg0)
}

// Append indicates an expected call of Append
func (mr *MockCustomersMockRecorder) Append(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockCustomers)(nil).Append), arg0)
}

// Count mocks base method
func (m *MockCustomers) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockCustomersMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCustomers)(nil).Count))
}

// Insert mocks base method
func (m *MockCustomers) Insert() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert")
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockCustomersMockRecorder) Insert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCustomers)(nil).Insert))
}

// List mocks base method
func (m *MockCustomers) List() []*customer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*customer)
	return ret0
}

// List indicates an expected call of List
func (mr *MockCustomersMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCustomers)(nil).List))
}
